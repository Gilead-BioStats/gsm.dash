---
title: "ShinyLive Experiment"
vignette: >
  %\VignetteIndexEntry{Live Dashboard}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
knitr:
  opts_chunk:
    collapse: true
    comment: '#>'
filters:
  - shinylive
---

::: {.shinylive data-shinylive-id="dashboard-app"}
```{shinylive-r}
#| standalone: true
library(shiny)

ui <- fluidPage(
  tags$script(HTML(
    "document.addEventListener('DOMContentLoaded', function () {
      window.addEventListener('message', function (event) {
        if (event.data.type === 'set-var') {
          Shiny.setInputValue('jsvar', event.data.jsvar);
          event.source.postMessage({ type: 'ack-var' }, event.origin);
        }
      });

      // Set a property on the iframe's window object to indicate Shiny is ready
      Shiny.initializedPromise.then(() => {
        console.log('Shiny is fully initialized!');
        window.shinyReady = true;
      });
    });"
  )),
  verbatimTextOutput("var_display")
)

server <- function(input, output, session) {
  output$var_display <- renderText({
    paste("The variable from outside Shiny is:", input$jsvar)
  })
}

shinyApp(ui, server)
```
:::

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const observer = new MutationObserver((mutations, observerInstance) => {
      const iframe = document.querySelector('div[data-shinylive-id="dashboard-app"] iframe');
      if (iframe) {
        console.log('Iframe is ready.');
        observerInstance.disconnect(); // Stop observing once iframe is found

        const jsvar = "valueSetViaJS";

        // Wait for the iframe to indicate Shiny is ready
        const waitForShinyReady = new Promise((resolve) => {
          const checkShinyReady = () => {
            if (iframe.contentWindow && iframe.contentWindow.shinyReady) {
              resolve();
            } else {
              setTimeout(checkShinyReady, 50);
            }
          };
          checkShinyReady();
        });

        waitForShinyReady.then(() => {
          console.log('Shiny app is ready. Sending variable...');
          iframe.contentWindow.postMessage({ type: 'set-var', jsvar }, '*');

          // Set up the listener for acknowledgment
          window.addEventListener('message', function handleAck(event) {
            if (event.data.type === 'ack-var') {
              console.log('Shiny app acknowledged the var.');
              window.removeEventListener('message', handleAck);
            }
          });
        });
      }
    });

    // Observe the DOM for changes in the div containing the iframe
    const target = document.querySelector('div[data-shinylive-id="dashboard-app"]');
    if (target) {
      observer.observe(target, { childList: true, subtree: true });
    } else {
      console.error('Target div for iframe not found.');
    }
  });
</script>
